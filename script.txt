 <script>
        // DOM elements
        const pdfFrame = document.getElementById('pdfFrame');
        const pdfUpload = document.getElementById('pdfUpload');
        const statusMessage = document.getElementById('statusMessage');
        const btnPrint = document.getElementById('btnPrint');
        
        // Load sample PDF
        document.getElementById('loadSample').addEventListener('click', () => {
            // Sample PDF from PDF.js project
            pdfFrame.src = 'https://mozilla.github.io/pdf.js/web/compressed.tracemonkey-pldi-09.pdf';
            showStatus('Sample PDF loaded successfully', 'success');
        });
        
        // Upload PDF button
        document.getElementById('uploadPdf').addEventListener('click', () => {
            pdfUpload.click();
        });
        
        // Handle PDF upload
        pdfUpload.addEventListener('change', (e) => {
            if (e.target.files.length > 0) {
                const file = e.target.files[0];
                if (file.type === 'application/pdf') {
                    const fileURL = URL.createObjectURL(file);
                    pdfFrame.src = fileURL;
                    showStatus('PDF uploaded successfully', 'success');
                } else {
                    showStatus('Please select a PDF file', 'error');
                }
            }
        });
        
        // Copies control
        document.getElementById('decreaseCopies').addEventListener('click', () => {
            const input = document.getElementById('copiesInput');
            if (input.value > 1) {
                input.value = parseInt(input.value) - 1;
            }
        });
        
        document.getElementById('increaseCopies').addEventListener('click', () => {
            const input = document.getElementById('copiesInput');
            input.value = parseInt(input.value) + 1;
        });
        
        // Action options selection
        const actionOptions = document.querySelectorAll('.option');
        actionOptions.forEach(option => {
            option.addEventListener('click', () => {
                actionOptions.forEach(opt => opt.classList.remove('selected'));
                option.classList.add('selected');
            });
        });
        
        // Print button functionality
        btnPrint.addEventListener('click', async () => {
            // Validate PDF is loaded
            if (!pdfFrame.src || pdfFrame.src === 'about:blank') {
                showStatus('Please load a PDF first', 'error');
                return;
            }
            
            try {
                // Show loading state
                btnPrint.innerHTML = '<span class="loading"></span> Sending to Native Printer...';
                btnPrint.disabled = true;
                
                // Gather all settings
                const settings = {
                    printer: document.getElementById('printerSelect').value,
                    copies: document.getElementById('copiesInput').value,
                    action: document.querySelector('input[name="action"]:checked').value,
                    allPages: document.getElementById('allPages').checked,
                    autoSelect: document.getElementById('autoSelect').checked,
                    colorPrint: document.getElementById('colorPrint').checked,
                    doubleSided: document.getElementById('doubleSided').checked,
                    timestamp: new Date().toISOString()
                };
                
                // Get PDF content (simulated for this demo)
                const pdfContent = await getPdfContent();
                
                // Prepare data to send to native app
                const printData = {
                    action: "printPdf",
                    settings: settings,
                    pdfContent: pdfContent
                };
                
                // Simulate sending to NativeMessagingHost.exe
                // In a real Edge extension, you would use:
                // chrome.runtime.sendNativeMessage('com.yourcompany.customprinter', printData, handleResponse);
                
                // For demo purposes, we'll simulate the native app response
                setTimeout(() => {
                    handleResponse({
                        success: true,
                        message: `PDF sent to ${settings.printer} successfully!`,
                        jobId: 'JOB-' + Date.now()
                    });
                }, 1500);
                
            } catch (error) {
                showStatus(`Error: ${error.message}`, 'error');
                btnPrint.innerHTML = '<i class="fas fa-paper-plane"></i> Send to Native Printer';
                btnPrint.disabled = false;
            }
        });
        
        // Function to get PDF content (simulated)
        function getPdfContent() {
            return new Promise((resolve, reject) => {
                // In a real Edge extension, you would:
                // 1. Get the PDF blob from the current tab
                // 2. Convert to base64 or ArrayBuffer
                
                // For this demo, we'll simulate with a sample base64 string
                const samplePdfBase64 = "JVBERi0xLjMKJcTl8uXrp/Og0MTGCjQgMCBvYmoKPDwvTGluZWFyaXplZCAxL0wgMTAwMDAvSCBbIDUwMCAxMDAwIF0vTiAxL1QgOTYwMC9WIDEwMDAwPj4KZW5kb2JqCjUgMCBvYmoKPDwvQ29udGVudHMgNiAwIFIvQ3JvcEJveFswIDAgNTk1IDg0Ml0vTWVkaWFCb3hbMCAwIDU5NSA4NDJdL1BhcmVudCA0IDAgUi9SZXNvdXJjZXM8PC9FeHRHU3RhdGU8PC9HUzAgNyAwIFI+Pi9Qcm9jU2V0Wy9QREYvVGV4dF0vWE9iamVjdDw8L0Zvcm0gOCAwIFI+Pj4vUm90YXRlIDAvVHlwZS9QYWdlPj4KZW5kb2JqCjYgMCBvYmoKPDwvRmlsdGVyL0ZsYXRlRGVjb2RlL0xlbmd0aCA0OD4+c3RyZWFtCnicU1VQcCjNKVZQcC7KzCsuTk1RMDSwNDYwMTZUMABiYwVDhQJDEz1jQwUjEwUjIxM9YwVDQwVjQwVzYwUjYwUzEwUzEwUjUwUTYwUzYwVjAwVDA0UjC0UAI2NCdQKZW5kc3RyZWFtCmVuZG9iago3IDAgb2JqCjw8L0NBIDEvY2EgMS9PUCBmYWxzZS9PUE0gMS9TQSB0cnVlL1NNYXNrL05vbmUvVHlwZS9FeHRHU3RhdGUvY2EgMS9vcCBmYWxzZT4+CmVuZG9iago4IDAgb2JqCjw8L0JCb3hbMCAwIDU5NSA4NDJdL0Zvcm1UeXBlIDEvTGVuZ3RoIDIyL01hdHJpeFsxIDAgMCAxIDAgMF0vUmVzb3VyY2VzPDwvUHJvY1NldFsvUERGXT4+L1N1YnR5cGUvRm9ybS9UeXBlL1hPYmplY3QvRmlsdGVyL0ZsYXRlRGVjb2RlPj5zdHJlYW0KeJwrVAhU0HXKdQ4u0Q8O0S9QcC7KzCsuTk1RMDSwNDYwMTZUMABiYwVDhQJDEz1jQwUjEwUjIxM9YwVDQwVjQwVzYwUjYwUzEwUzEwUjUwUTYwUzYwVjAwVDA0UjC0UAI2NCdQKZW5kc3RyZWFtCmVuZG9iagp0cmFpbGVyCjw8L1Jvb3QgMSAwIFIvU2l6ZSA5Pj4Kc3RhcnR4cmVmCjEwNzcKJSVFT0Y=";
                resolve(samplePdfBase64);
            });
        }
        
        // Handle response from native app
        function handleResponse(response) {
            if (response && response.success) {
                showStatus(`✅ ${response.message} | Job ID: ${response.jobId}`, 'success');
                
                // Create a receipt element
                const receipt = document.createElement('div');
                receipt.innerHTML = `
                    <div style="margin-top:20px; padding:15px; background:#f0f8ff; border-radius:8px;">
                        <h3><i class="fas fa-receipt"></i> Print Receipt</h3>
                        <p><strong>Job ID:</strong> ${response.jobId}</p>
                        <p><strong>Printer:</strong> ${document.getElementById('printerSelect').value}</p>
                        <p><strong>Copies:</strong> ${document.getElementById('copiesInput').value}</p>
                        <p><strong>Action:</strong> ${document.querySelector('input[name="action"]:checked').value}</p>
                        <p><strong>Time:</strong> ${new Date().toLocaleTimeString()}</p>
                    </div>
                `;
                
                document.querySelector('.printer-settings').appendChild(receipt);
            } else {
                showStatus(`❌ Error: ${response?.message || 'Failed to send to printer'}`, 'error');
            }
            
            // Reset print button
            btnPrint.innerHTML = '<i class="fas fa-paper-plane"></i> Send to Native Printer';
            btnPrint.disabled = false;
        }
        
        // Help button
        document.getElementById('btnHelp').addEventListener('click', () => {
            showStatus('This application sends PDF content and print settings to your C# NativeMessagingHost.exe', 'success');
        });
        
        // Cancel button
        document.getElementById('btnCancel').addEventListener('click', () => {
            pdfFrame.src = 'about:blank';
            document.getElementById('copiesInput').value = '1';
            document.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
            document.querySelector('.option:first-child').classList.add('selected');
            document.getElementById('allPages').checked = true;
            document.getElementById('autoSelect').checked = false;
            document.getElementById('colorPrint').checked = true;
            document.getElementById('doubleSided').checked = false;
            showStatus('Form reset successfully', 'success');
        });
        
        // Show status message
        function showStatus(message, type) {
            statusMessage.textContent = message;
            statusMessage.className = 'status-message';
            statusMessage.classList.add(`status-${type}`);
            
            // Auto hide after 5 seconds
            setTimeout(() => {
                statusMessage.style.display = 'none';
            }, 5000);
        }
        
        // Initialize with sample PDF
        window.onload = () => {
            document.getElementById('loadSample').click();
        };
    </script>